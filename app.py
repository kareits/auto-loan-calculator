# –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –î–õ–Ø –ê–í–¢–û–ö–†–ï–î–ò–¢–û–í

import streamlit as st


# –°–ª–æ–≤–∞—Ä–∏ —Å—Ç–∞–≤–æ–∫
car_rate_dict = {"used_car": 0.33, "new_car": 0.28}
insurance_rates = {"new_car": 0.045, "used_car": 0.025}

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è")


# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
car_type = st.selectbox(
    "–¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è", ["–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –ø—Ä–æ–±–µ–≥–æ–º"]
)
car_key = "new_car" if car_type == "–ù–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å" else "used_car"

# –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
car_price = st.number_input(
    "–°—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–≤ —Ç–µ–Ω–≥–µ)",
    min_value=0,
    max_value=200_000_000,
    value=10_000_000,
    step=100_000
)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä—è–¥–∞–º–∏
st.write(f"üí∞ –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è: **{car_price:,.0f} —Ç–µ–Ω–≥–µ**")

# –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å
if car_key == "new_car":
    default_down_payment = 20
else:
    default_down_payment = 30

down_payment_percent = st.slider(
    "–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å (%)", 0, 100, default_down_payment, step=5
)

# –†–∞—Å—á–µ—Ç —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø—Ä–µ–º–∏–∏
st.subheader("–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ö–ê–°–ö–û")
insurance_switch = st.toggle("–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ö–∞—Å–∫–æ –Ω–∞ 1 –≥–æ–¥", value=False)
insurance_premium = 0
if insurance_switch:
    insurance_premium = car_price * insurance_rates[car_key]
    st.write(
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø—Ä–µ–º–∏–∏: **{insurance_premium:,.0f} —Ç–µ–Ω–≥–µ**"
    )
else:
    st.write("–ö–ê–°–ö–û –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")

# –°—É–º–º–∞ –∑–∞–π–º–∞ —Å–æ —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –ø—Ä–µ–º–∏–µ–π
principal_net = car_price * (1 - down_payment_percent / 100)
loan_amount_display = principal_net + insurance_premium 

# –°—É–±—Å–∏–¥–∏—è –æ—Ç –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–∞
st.subheader("–°—É–±—Å–∏–¥–∏—è –æ—Ç –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–∞")
has_subsidy = st.toggle("–ù–∞–ª–∏—á–∏–µ —Å—É–±—Å–∏–¥–∏–∏ –æ—Ç –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–µ—Ä–∞", value=False)

subsidy_percent = 0
subsidy_amount = 0
if has_subsidy:
    subsidy_percent = st.slider("–†–∞–∑–º–µ—Ä —Å—É–±—Å–∏–¥–∏–∏ (%)", 0, 20, 5, step=1)
    subsidy_amount = car_price * subsidy_percent / 100
    st.write(f"üí∏ –°—É–º–º–∞ —Å—É–±—Å–∏–¥–∏–∏: **{subsidy_amount:,.0f} —Ç–µ–Ω–≥–µ**")
else:
    st.write("–°—É–±—Å–∏–¥–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è.")

# –ê–≥–µ–Ω—Ç—Å–∫–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
st.subheader("–ê–≥–µ–Ω—Ç—Å–∫–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –¥–∏–ª–µ—Ä—Å–∫–æ–º—É —Ü–µ–Ω—Ç—Ä—É (—Å –ù–î–°)")
agent_fee_percent = st.slider(
    "–†–∞–∑–º–µ—Ä –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è (%)", 0.0, 10.0, 0.0, step=0.1
)
agent_fee_amount = principal_net * agent_fee_percent / 100
st.write(
    f"üí∏ –°—É–º–º–∞ –∞–≥–µ–Ω—Ç—Å–∫–æ–≥–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –î–¶: **{agent_fee_amount:,.0f} —Ç–µ–Ω–≥–µ**"
)

# –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∑–∞–π–º–∞ (—Å —É—á–µ—Ç–æ–º —Å—É–±—Å–∏–¥–∏–π –∏ –∞–≥–µ–Ω—Ç—Å–∫–æ–π –∫–æ–º–∏—Å—Å–∏–∏)
loan_amount = (
    principal_net + insurance_premium - subsidy_amount + agent_fee_amount
)

# –°—Ä–æ–∫ –∑–∞–π–º–∞
st.subheader("–°—Ä–æ–∫ –∑–∞–π–º–∞")
loan_term = st.slider("–°—Ä–æ–∫ –∑–∞–π–º–∞ (–≤ –º–µ—Å—è—Ü–∞—Ö)", 0, 84, 60, step=12)

# –†–∞—Å—á–µ—Ç –∞–Ω–Ω—É–∏—Ç–µ—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
rate = car_rate_dict[car_key]
monthly_rate = rate / 12
annuity_factor = (
    (monthly_rate * (1 + monthly_rate) ** loan_term)
    / ((1 + monthly_rate) ** loan_term - 1)
)
monthly_payment = loan_amount * annuity_factor

# –ü–µ—Ä–µ—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –≥–æ–¥–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ (APR)
# –†–µ—à–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞–¥–∞—á—É: –∫–∞–∫–∞—è —Å—Ç–∞–≤–∫–∞ –¥–∞—ë—Ç —Ç–∞–∫–æ–π –∂–µ –ø–ª–∞—Ç—ë–∂
# –ø—Ä–∏ –∏—Å—Ö–æ–¥–Ω–æ–º –¥–æ–ª–≥–µ –±–µ–∑ —Å—É–±—Å–∏–¥–∏–∏
def find_effective_rate(principal, payment, term):
    # —á–∏—Å–ª–µ–Ω–Ω—ã–π –ø–æ–¥–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –º–µ—Ç–æ–¥–æ–º –ù—å—é—Ç–æ–Ω–∞
    r = 0.25 / 12  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
    for _ in range(100):
        annuity_factor = (r * (1 + r) ** term) / ((1 + r) ** term - 1)
        f = principal * annuity_factor - payment
        df = (
            (
                principal * ((1 + r) ** term * ((1 + r) ** term - 1)
                             - (r * term * (1 + r) ** (term - 1)))
            )
            / ((1 + r) ** term - 1) ** 2
        )
        try:
            r -= f / df
        except ZeroDivisionError:
            st.warning("‚ö† –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break
        if abs(f) < 1e-6:
            break
        return r * 12  # –≥–æ–¥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞
if has_subsidy or agent_fee_percent:
    effective_rate = find_effective_rate(
        loan_amount_display, monthly_payment, loan_term
    )

total_payment = monthly_payment * loan_term
overpayment = total_payment - loan_amount

st.markdown(f"## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞")
if has_subsidy and effective_rate < 0:
    st.write(f"#### –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å. –ò–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –∏/–∏–ª–∏ —Ä–∞–∑–º–µ—Ä —Å—É–±—Å–∏–¥–∏–π!")
else:
    st.write(f"#### üìä –°—É–º–º–∞ –∑–∞–π–º–∞: **{loan_amount_display:,.0f} —Ç–µ–Ω–≥–µ**")
    if has_subsidy or agent_fee_percent:
        st.write(f"#### üìà –°—Ç–∞–≤–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: **{effective_rate * 100:.1f}% –≥–æ–¥–æ–≤—ã—Ö**")
    else:
        st.write(f"#### üìà –°—Ç–∞–≤–∫–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è: **{rate * 100:.1f}% –≥–æ–¥–æ–≤—ã—Ö**")
    st.write(f"#### üí≥ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: {monthly_payment:,.0f} —Ç–µ–Ω–≥–µ")
    st.write(f"#### üßæ –°—É–º–º–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã: {overpayment:,.0f} —Ç–µ–Ω–≥–µ")
